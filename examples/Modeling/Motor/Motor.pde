import com.pdplusplus.*;

/*
This is based on Andy Farnell's motor model from the "Designing Sound" book and
patch library.  
It simulates a rotor, stator and tube resonator all generated by a single
phasor, or sawtooth wave.  

Right now this sketch will control the time length (x) of the sound and the
motor speed (y) using the mouse cursor.  Click the mouse to start the motor.  

You can look at the MotorGenerator class and look at the other parameters you
could experiment with.  

*/

 Pd pd;
 MyMusic music;
 

 void setup() {
   size(640, 360);
   background(255);
   
   
   music = new MyMusic();
   pd = Pd.getInstance(music);
   
   //start the Pd engine thread
   pd.start();
   
 }
 
 void draw() {
   background(0);
   text("Click mouse to begin", (width/2)-35, 15);
   double t = map(mouseX, 0, width, 0, 1);
   double ms = map(mouseY, height, 0, 0, 1);
   music.setMaxSpeed(ms);
   music.setTime(t);
   text("length = " + str((float)t*20)+ "s " + " speed = " + str((float)ms), mouseX, mouseY);
 }
 
 void mousePressed() {
   music.setBang(true);
   
 }
 
 public void dispose() {
   //stop Pd engine
   pd.stop();
  println("Pd4P3 audio engine stopped.");
    super.dispose();
}
 
 /*
   This is where you should put all of your music/audio behavior and DSP
 */
 class MyMusic extends PdAlgorithm {
   
   double time = .5;
   MotorGenerator motor = new MotorGenerator();
   
   //All DSP code goes here
   void runAlgorithm(double in1, double in2) {
     outputL = outputR = motor.perform(); 
     
   }
  
  //We use synchronized to communicate with the audio thread
   synchronized void setTime(double t) {
      motor.setRuntime(t);
   }
   
   synchronized double getTime() {
     return motor.getRuntime();
   }
   
   synchronized void setBang(boolean b) {

       motor.setGo(b);
   }
   
   synchronized void setMaxSpeed(double ms) {
      motor.setMaxSpeed(ms); 
   }
   //Free all objects created from Pd4P3 lib
   void free() {
     
     motor.free();
   }
   
 }
